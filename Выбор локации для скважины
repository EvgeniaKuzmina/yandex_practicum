{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5f41103f",
   "metadata": {},
   "source": [
    "# Выбор локации для скважины\n",
    "Допустим, вы работаете в добывающей компании «ГлавРосГосНефть». Нужно решить, где бурить новую скважину.\n",
    "\n",
    "Вам предоставлены пробы нефти в трёх регионах: в каждом 10 000 месторождений, где измерили качество нефти и объём её запасов. Постройте модель машинного обучения, которая поможет определить регион, где добыча принесёт наибольшую прибыль. Проанализируйте возможную прибыль и риски техникой Bootstrap.\n",
    "\n",
    "Шаги для выбора локации:\n",
    "\n",
    "В избранном регионе ищут месторождения, для каждого определяют значения признаков;\n",
    "\n",
    "Строят модель и оценивают объём запасов;\n",
    "\n",
    "Выбирают месторождения с самым высокими оценками значений. Количество месторождений зависит от бюджета компании и стоимости разработки одной скважины;\n",
    "\n",
    "Прибыль равна суммарной прибыли отобранных месторождений."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "021c7399",
   "metadata": {},
   "source": [
    "## 1.  Загрузка и подготовка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61bef6fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as st\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0f4aac0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    data_1 = pd.read_csv(r'C:\\Users\\kuzmi\\Downloads\\geo_data_0.csv')\n",
    "except:\n",
    "    data_1 = pd.read_csv('/datasets/geo_data_0.csv')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89821b52",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    data_2 = pd.read_csv(r'C:\\Users\\kuzmi\\Downloads\\geo_data_1.csv')\n",
    "except:\n",
    "    data_2 = pd.read_csv('/datasets/geo_data_1.csv')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c938e594",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    data_3 = pd.read_csv(r'C:\\Users\\kuzmi\\Downloads\\geo_data_2.csv')\n",
    "except:\n",
    "    data_3 = pd.read_csv('/datasets/geo_data_2.csv')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7473b1f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>f0</th>\n",
       "      <th>f1</th>\n",
       "      <th>f2</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>txEyH</td>\n",
       "      <td>0.705745</td>\n",
       "      <td>-0.497823</td>\n",
       "      <td>1.221170</td>\n",
       "      <td>105.280062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2acmU</td>\n",
       "      <td>1.334711</td>\n",
       "      <td>-0.340164</td>\n",
       "      <td>4.365080</td>\n",
       "      <td>73.037750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>409Wp</td>\n",
       "      <td>1.022732</td>\n",
       "      <td>0.151990</td>\n",
       "      <td>1.419926</td>\n",
       "      <td>85.265647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>iJLyR</td>\n",
       "      <td>-0.032172</td>\n",
       "      <td>0.139033</td>\n",
       "      <td>2.978566</td>\n",
       "      <td>168.620776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Xdl7t</td>\n",
       "      <td>1.988431</td>\n",
       "      <td>0.155413</td>\n",
       "      <td>4.751769</td>\n",
       "      <td>154.036647</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id        f0        f1        f2     product\n",
       "0  txEyH  0.705745 -0.497823  1.221170  105.280062\n",
       "1  2acmU  1.334711 -0.340164  4.365080   73.037750\n",
       "2  409Wp  1.022732  0.151990  1.419926   85.265647\n",
       "3  iJLyR -0.032172  0.139033  2.978566  168.620776\n",
       "4  Xdl7t  1.988431  0.155413  4.751769  154.036647"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf32c006",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100000 entries, 0 to 99999\n",
      "Data columns (total 5 columns):\n",
      " #   Column   Non-Null Count   Dtype  \n",
      "---  ------   --------------   -----  \n",
      " 0   id       100000 non-null  object \n",
      " 1   f0       100000 non-null  float64\n",
      " 2   f1       100000 non-null  float64\n",
      " 3   f2       100000 non-null  float64\n",
      " 4   product  100000 non-null  float64\n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 3.8+ MB\n"
     ]
    }
   ],
   "source": [
    "data_1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5adaa135",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id         0\n",
       "f0         0\n",
       "f1         0\n",
       "f2         0\n",
       "product    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "53533722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb2f368b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>f0</th>\n",
       "      <th>f1</th>\n",
       "      <th>f2</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>kBEdx</td>\n",
       "      <td>-15.001348</td>\n",
       "      <td>-8.276000</td>\n",
       "      <td>-0.005876</td>\n",
       "      <td>3.179103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62mP7</td>\n",
       "      <td>14.272088</td>\n",
       "      <td>-3.475083</td>\n",
       "      <td>0.999183</td>\n",
       "      <td>26.953261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vyE1P</td>\n",
       "      <td>6.263187</td>\n",
       "      <td>-5.948386</td>\n",
       "      <td>5.001160</td>\n",
       "      <td>134.766305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KcrkZ</td>\n",
       "      <td>-13.081196</td>\n",
       "      <td>-11.506057</td>\n",
       "      <td>4.999415</td>\n",
       "      <td>137.945408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AHL4O</td>\n",
       "      <td>12.702195</td>\n",
       "      <td>-8.147433</td>\n",
       "      <td>5.004363</td>\n",
       "      <td>134.766305</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id         f0         f1        f2     product\n",
       "0  kBEdx -15.001348  -8.276000 -0.005876    3.179103\n",
       "1  62mP7  14.272088  -3.475083  0.999183   26.953261\n",
       "2  vyE1P   6.263187  -5.948386  5.001160  134.766305\n",
       "3  KcrkZ -13.081196 -11.506057  4.999415  137.945408\n",
       "4  AHL4O  12.702195  -8.147433  5.004363  134.766305"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c92a1308",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100000 entries, 0 to 99999\n",
      "Data columns (total 5 columns):\n",
      " #   Column   Non-Null Count   Dtype  \n",
      "---  ------   --------------   -----  \n",
      " 0   id       100000 non-null  object \n",
      " 1   f0       100000 non-null  float64\n",
      " 2   f1       100000 non-null  float64\n",
      " 3   f2       100000 non-null  float64\n",
      " 4   product  100000 non-null  float64\n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 3.8+ MB\n"
     ]
    }
   ],
   "source": [
    "data_2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "75438155",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id         0\n",
       "f0         0\n",
       "f1         0\n",
       "f2         0\n",
       "product    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c485d55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c1045b14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>f0</th>\n",
       "      <th>f1</th>\n",
       "      <th>f2</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>fwXo0</td>\n",
       "      <td>-1.146987</td>\n",
       "      <td>0.963328</td>\n",
       "      <td>-0.828965</td>\n",
       "      <td>27.758673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WJtFt</td>\n",
       "      <td>0.262778</td>\n",
       "      <td>0.269839</td>\n",
       "      <td>-2.530187</td>\n",
       "      <td>56.069697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ovLUW</td>\n",
       "      <td>0.194587</td>\n",
       "      <td>0.289035</td>\n",
       "      <td>-5.586433</td>\n",
       "      <td>62.871910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>q6cA6</td>\n",
       "      <td>2.236060</td>\n",
       "      <td>-0.553760</td>\n",
       "      <td>0.930038</td>\n",
       "      <td>114.572842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WPMUX</td>\n",
       "      <td>-0.515993</td>\n",
       "      <td>1.716266</td>\n",
       "      <td>5.899011</td>\n",
       "      <td>149.600746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id        f0        f1        f2     product\n",
       "0  fwXo0 -1.146987  0.963328 -0.828965   27.758673\n",
       "1  WJtFt  0.262778  0.269839 -2.530187   56.069697\n",
       "2  ovLUW  0.194587  0.289035 -5.586433   62.871910\n",
       "3  q6cA6  2.236060 -0.553760  0.930038  114.572842\n",
       "4  WPMUX -0.515993  1.716266  5.899011  149.600746"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "64c8805a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id         0\n",
       "f0         0\n",
       "f1         0\n",
       "f2         0\n",
       "product    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_3.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0dc9512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_3.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2fc48fe1",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1 = data_1.drop('id', axis=1)\n",
    "data_2 = data_2.drop('id', axis=1)\n",
    "data_3 = data_3.drop('id', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeed5a34",
   "metadata": {},
   "source": [
    "## 2.  Обучение и проверка модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f40906bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_and_train(data):\n",
    "    \n",
    "    features = data.drop([\"product\"], axis=1)\n",
    "    target = data[\"product\"]\n",
    "    features_train, features_valid, target_train, target_valid = train_test_split(features, \n",
    "                                                                                  target, \n",
    "                                                                                  test_size=0.25, \n",
    "                                                                                  random_state=1)\n",
    "    scaler = MinMaxScaler()\n",
    "    features_train = scaler.fit_transform(features_train)\n",
    "    features_valid = scaler.transform(features_valid)\n",
    "    \n",
    "    lr = LinearRegression(normalize=False)\n",
    "    lr.fit(features_train, target_train)\n",
    "    predictions = lr.predict(features_valid)\n",
    "    predictions = pd.Series(predictions)\n",
    "    rmse = (mean_squared_error(predictions, target_valid))**(0.5)\n",
    "    average_product = sum(predictions) / len(predictions)\n",
    "    \n",
    "    print(\"RMSE: {0:.2f}\".format(rmse))\n",
    "    print(\"Average product: {0:.2f}\".format(average_product))\n",
    "    \n",
    "    return (predictions, target_valid.reset_index(drop=True), rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "315e26ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 37.74\n",
      "Average product: 92.49\n",
      "RMSE: 0.89\n",
      "Average product: 69.12\n",
      "RMSE: 39.87\n",
      "Average product: 94.96\n"
     ]
    }
   ],
   "source": [
    "predictions_1, validation_1, rmse_1 = split_and_train(data_1)\n",
    "predictions_2, validation_2, rmse_2 = split_and_train(data_2)\n",
    "predictions_3, validation_3, rmse_3 = split_and_train(data_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7a063ef1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_1['product'].hist();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2daf7592",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_2['product'].hist();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d90bfbc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_3['product'].hist();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d2b9c32",
   "metadata": {},
   "source": [
    "## 3. Подготовка к расчету прибыли"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2add5791",
   "metadata": {},
   "outputs": [],
   "source": [
    "BUDGET = 10**10\n",
    "INCOME_PER_ONE_BARREL = 450*10**3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "502225b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "BUDGET_FOR_ONE_OIL_WELL = BUDGET / 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "02021bb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50000000.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BUDGET_FOR_ONE_OIL_WELL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7e8ef52c",
   "metadata": {},
   "outputs": [],
   "source": [
    "BREAKEVEN_POINT = BUDGET / INCOME_PER_ONE_BARREL "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "48ce7c4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22222.222222222223"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BREAKEVEN_POINT "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c829f149",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Объем нефти в скважине для безубыточного функционирования должен составлять не менее: 111.11111111111111\n"
     ]
    }
   ],
   "source": [
    "print('Объем нефти в скважине для безубыточного функционирования должен составлять не менее:', BREAKEVEN_POINT  / 200)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74b08a6a",
   "metadata": {},
   "source": [
    "Запаса нефти по всем регионам недостаточно, чтобы окупить разработку. Необходимо найти скважины с максимальным запасом."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ebcedd3",
   "metadata": {},
   "source": [
    "## 4. Расчет прибыли и рисков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "63324f48",
   "metadata": {},
   "outputs": [],
   "source": [
    "def profit(predictions, target):\n",
    "    top_preds = predictions.sort_values(ascending=False)\n",
    "    top_target = target[top_preds.index][:200]\n",
    "    revenue = top_target.sum() * INCOME_PER_ONE_BARREL\n",
    "    return revenue - BUDGET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3ce6a987",
   "metadata": {},
   "outputs": [],
   "source": [
    "state = np.random.RandomState(12345)\n",
    "def find_conf_interval_and_loss_risk(predictions, target):\n",
    "    revenue = []\n",
    "    for _ in range(1000):\n",
    "        target_sample = target.sample(500, replace=True, random_state=state)\n",
    "        predictions_sample = predictions[target_sample.index]\n",
    "        revenue.append(profit(predictions_sample, target_sample)) \n",
    "        \n",
    "    lower = int(np.percentile(revenue, 2.5))\n",
    "    higher = int(np.percentile(revenue, 97.5))\n",
    "    mean_revenue = int(sum(revenue) / len(revenue))\n",
    "    risk = st.percentileofscore(revenue, 0)\n",
    "\n",
    "    return ((lower, higher), mean_revenue, risk)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "72db1a5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Region 1:\n",
      "Mean: 458100401\n",
      "95% confidence interval: (-91938453, 1015824888)\n",
      "Risk of loss: 4.6000000000000005\n",
      "Region 2:\n",
      "Mean: 533056709\n",
      "95% confidence interval: (99430448, 973064424)\n",
      "Risk of loss: 0.6000000000000001\n",
      "Region 3:\n",
      "Mean: 411076672\n",
      "95% confidence interval: (-138944979, 959378918)\n",
      "Risk of loss: 7.2\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "for preds, target in zip([predictions_1, predictions_2, predictions_3], \n",
    "                         [validation_1, validation_2, validation_3]):\n",
    "    interval, mean_revenue, risk = find_conf_interval_and_loss_risk(preds, target)\n",
    "    print(f\"Region {i}:\")\n",
    "    print(f\"Mean: {mean_revenue}\")\n",
    "    print(f\"95% confidence interval: {interval}\")\n",
    "    print(f\"Risk of loss: {risk}\")\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "652d5544",
   "metadata": {},
   "source": [
    "# Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1175d15",
   "metadata": {},
   "source": [
    "Самым перспективным (с максимальной прибылью и минимальными рисками) является регион 2."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 5790,
    "start_time": "2023-04-06T05:09:52.226Z"
   },
   {
    "duration": 416,
    "start_time": "2023-04-06T05:09:58.018Z"
   },
   {
    "duration": 632,
    "start_time": "2023-04-06T05:09:58.436Z"
   },
   {
    "duration": 606,
    "start_time": "2023-04-06T05:09:59.070Z"
   },
   {
    "duration": 13,
    "start_time": "2023-04-06T05:09:59.679Z"
   },
   {
    "duration": 39,
    "start_time": "2023-04-06T05:09:59.694Z"
   },
   {
    "duration": 50,
    "start_time": "2023-04-06T05:09:59.735Z"
   },
   {
    "duration": 60,
    "start_time": "2023-04-06T05:09:59.787Z"
   },
   {
    "duration": 8,
    "start_time": "2023-04-06T05:09:59.849Z"
   },
   {
    "duration": 25,
    "start_time": "2023-04-06T05:09:59.859Z"
   },
   {
    "duration": 14,
    "start_time": "2023-04-06T05:09:59.885Z"
   },
   {
    "duration": 58,
    "start_time": "2023-04-06T05:09:59.900Z"
   },
   {
    "duration": 9,
    "start_time": "2023-04-06T05:09:59.959Z"
   },
   {
    "duration": 13,
    "start_time": "2023-04-06T05:09:59.970Z"
   },
   {
    "duration": 66,
    "start_time": "2023-04-06T05:09:59.984Z"
   },
   {
    "duration": 13,
    "start_time": "2023-04-06T05:10:00.051Z"
   },
   {
    "duration": 48,
    "start_time": "2023-04-06T05:10:00.066Z"
   },
   {
    "duration": 169,
    "start_time": "2023-04-06T05:10:00.115Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.286Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.287Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.289Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.290Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.291Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.292Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.292Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.293Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.295Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.295Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.297Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T05:10:00.298Z"
   },
   {
    "duration": 482,
    "start_time": "2023-04-06T05:10:11.670Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T05:10:12.823Z"
   },
   {
    "duration": 161,
    "start_time": "2023-04-06T05:10:13.036Z"
   },
   {
    "duration": 135,
    "start_time": "2023-04-06T05:10:13.266Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T05:10:13.906Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T05:10:14.084Z"
   },
   {
    "duration": 4,
    "start_time": "2023-04-06T05:10:14.294Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T05:10:14.520Z"
   },
   {
    "duration": 4,
    "start_time": "2023-04-06T05:10:14.733Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T05:10:14.925Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T05:10:15.472Z"
   },
   {
    "duration": 5,
    "start_time": "2023-04-06T05:10:15.642Z"
   },
   {
    "duration": 3900,
    "start_time": "2023-04-06T05:10:15.789Z"
   },
   {
    "duration": 1470,
    "start_time": "2023-04-06T08:13:05.719Z"
   },
   {
    "duration": 511,
    "start_time": "2023-04-06T08:13:07.191Z"
   },
   {
    "duration": 651,
    "start_time": "2023-04-06T08:13:07.704Z"
   },
   {
    "duration": 674,
    "start_time": "2023-04-06T08:13:08.357Z"
   },
   {
    "duration": 12,
    "start_time": "2023-04-06T08:13:09.033Z"
   },
   {
    "duration": 22,
    "start_time": "2023-04-06T08:13:09.046Z"
   },
   {
    "duration": 9,
    "start_time": "2023-04-06T08:13:09.069Z"
   },
   {
    "duration": 56,
    "start_time": "2023-04-06T08:13:09.079Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T08:13:09.137Z"
   },
   {
    "duration": 23,
    "start_time": "2023-04-06T08:13:09.150Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T08:13:09.175Z"
   },
   {
    "duration": 53,
    "start_time": "2023-04-06T08:13:09.187Z"
   },
   {
    "duration": 9,
    "start_time": "2023-04-06T08:13:09.242Z"
   },
   {
    "duration": 23,
    "start_time": "2023-04-06T08:13:09.253Z"
   },
   {
    "duration": 57,
    "start_time": "2023-04-06T08:13:09.278Z"
   },
   {
    "duration": 12,
    "start_time": "2023-04-06T08:13:09.337Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T08:13:09.350Z"
   },
   {
    "duration": 109,
    "start_time": "2023-04-06T08:13:09.361Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.472Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.473Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.474Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.475Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.476Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.477Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.478Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.479Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.480Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.481Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.482Z"
   },
   {
    "duration": 0,
    "start_time": "2023-04-06T08:13:09.483Z"
   },
   {
    "duration": 384,
    "start_time": "2023-04-06T08:14:08.970Z"
   },
   {
    "duration": 137,
    "start_time": "2023-04-06T08:14:10.760Z"
   },
   {
    "duration": 139,
    "start_time": "2023-04-06T08:14:11.245Z"
   },
   {
    "duration": 124,
    "start_time": "2023-04-06T08:14:12.052Z"
   },
   {
    "duration": 2,
    "start_time": "2023-04-06T08:14:13.101Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T08:14:13.637Z"
   },
   {
    "duration": 8,
    "start_time": "2023-04-06T08:14:14.107Z"
   },
   {
    "duration": 2,
    "start_time": "2023-04-06T08:14:35.612Z"
   },
   {
    "duration": 4,
    "start_time": "2023-04-06T08:14:38.219Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:14:39.045Z"
   },
   {
    "duration": 4,
    "start_time": "2023-04-06T08:14:39.791Z"
   },
   {
    "duration": 9,
    "start_time": "2023-04-06T08:14:40.655Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:14:58.787Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:15:02.524Z"
   },
   {
    "duration": 5,
    "start_time": "2023-04-06T08:15:03.143Z"
   },
   {
    "duration": 17,
    "start_time": "2023-04-06T08:15:03.719Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:15:53.422Z"
   },
   {
    "duration": 6,
    "start_time": "2023-04-06T08:15:54.746Z"
   },
   {
    "duration": 18,
    "start_time": "2023-04-06T08:15:55.524Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:16:33.694Z"
   },
   {
    "duration": 5,
    "start_time": "2023-04-06T08:16:34.703Z"
   },
   {
    "duration": 3776,
    "start_time": "2023-04-06T08:16:35.231Z"
   },
   {
    "duration": 1455,
    "start_time": "2023-04-06T08:18:01.039Z"
   },
   {
    "duration": 220,
    "start_time": "2023-04-06T08:18:02.496Z"
   },
   {
    "duration": 146,
    "start_time": "2023-04-06T08:18:02.718Z"
   },
   {
    "duration": 160,
    "start_time": "2023-04-06T08:18:02.865Z"
   },
   {
    "duration": 14,
    "start_time": "2023-04-06T08:18:03.027Z"
   },
   {
    "duration": 28,
    "start_time": "2023-04-06T08:18:03.043Z"
   },
   {
    "duration": 47,
    "start_time": "2023-04-06T08:18:03.073Z"
   },
   {
    "duration": 87,
    "start_time": "2023-04-06T08:18:03.121Z"
   },
   {
    "duration": 10,
    "start_time": "2023-04-06T08:18:03.209Z"
   },
   {
    "duration": 34,
    "start_time": "2023-04-06T08:18:03.220Z"
   },
   {
    "duration": 11,
    "start_time": "2023-04-06T08:18:03.255Z"
   },
   {
    "duration": 49,
    "start_time": "2023-04-06T08:18:03.268Z"
   },
   {
    "duration": 9,
    "start_time": "2023-04-06T08:18:03.318Z"
   },
   {
    "duration": 18,
    "start_time": "2023-04-06T08:18:03.329Z"
   },
   {
    "duration": 52,
    "start_time": "2023-04-06T08:18:03.348Z"
   },
   {
    "duration": 11,
    "start_time": "2023-04-06T08:18:03.402Z"
   },
   {
    "duration": 35,
    "start_time": "2023-04-06T08:18:03.415Z"
   },
   {
    "duration": 402,
    "start_time": "2023-04-06T08:18:03.451Z"
   },
   {
    "duration": 311,
    "start_time": "2023-04-06T08:18:03.855Z"
   },
   {
    "duration": 142,
    "start_time": "2023-04-06T08:18:04.167Z"
   },
   {
    "duration": 131,
    "start_time": "2023-04-06T08:18:04.310Z"
   },
   {
    "duration": 3,
    "start_time": "2023-04-06T08:18:04.442Z"
   },
   {
    "duration": 28,
    "start_time": "2023-04-06T08:18:04.446Z"
   },
   {
    "duration": 20,
    "start_time": "2023-04-06T08:18:04.476Z"
   },
   {
    "duration": 17,
    "start_time": "2023-04-06T08:18:04.497Z"
   },
   {
    "duration": 21,
    "start_time": "2023-04-06T08:18:04.515Z"
   },
   {
    "duration": 16,
    "start_time": "2023-04-06T08:18:04.538Z"
   },
   {
    "duration": 13,
    "start_time": "2023-04-06T08:18:04.555Z"
   },
   {
    "duration": 16,
    "start_time": "2023-04-06T08:18:04.569Z"
   },
   {
    "duration": 3832,
    "start_time": "2023-04-06T08:18:04.586Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
