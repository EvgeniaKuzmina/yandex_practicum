{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8edf1d5f",
   "metadata": {},
   "source": [
    "Вам нужно защитить данные клиентов страховой компании «Хоть потоп». Разработайте такой метод преобразования данных, чтобы по ним было сложно восстановить персональную информацию. Обоснуйте корректность его работы.\n",
    "Нужно защитить данные, чтобы при преобразовании качество моделей машинного обучения не ухудшилось. Подбирать наилучшую модель не требуется."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ff2bf2",
   "metadata": {},
   "source": [
    "# 1. Загрузка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "36677bb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import accuracy_score\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.metrics import r2_score\n",
    "from tqdm.notebook import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cda9b4ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    data = pd.read_csv(r'C:\\Users\\kuzmi\\Downloads\\insurance.csv')\n",
    "except:\n",
    "    data = pd.read_csv(r'/datasets/insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "799b722d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Пол</th>\n",
       "      <th>Возраст</th>\n",
       "      <th>Зарплата</th>\n",
       "      <th>Члены семьи</th>\n",
       "      <th>Страховые выплаты</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>41.0</td>\n",
       "      <td>49600.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>38000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>41700.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>26100.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Пол  Возраст  Зарплата  Члены семьи  Страховые выплаты\n",
       "0    1     41.0   49600.0            1                  0\n",
       "1    0     46.0   38000.0            1                  1\n",
       "2    0     29.0   21000.0            0                  0\n",
       "3    0     21.0   41700.0            2                  0\n",
       "4    1     28.0   26100.0            0                  0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27390a9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Пол                5000 non-null   int64  \n",
      " 1   Возраст            5000 non-null   float64\n",
      " 2   Зарплата           5000 non-null   float64\n",
      " 3   Члены семьи        5000 non-null   int64  \n",
      " 4   Страховые выплаты  5000 non-null   int64  \n",
      "dtypes: float64(2), int64(3)\n",
      "memory usage: 195.4 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2e4b10a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<b>Комментарий ревьюера ✔️:</b> Супер, все хорошо </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d6aa342",
   "metadata": {},
   "source": [
    "# 2. Умножение матриц\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95920503",
   "metadata": {},
   "source": [
    "Oбозначения:\n",
    "\n",
    "- $X$ — матрица признаков (нулевой столбец состоит из единиц)\n",
    "\n",
    "- $y$ — вектор целевого признака\n",
    "\n",
    "- $P$ — матрица, на которую умножаются признаки\n",
    "\n",
    "- $w$ — вектор весов линейной регрессии (нулевой элемент равен сдвигу)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f810c32",
   "metadata": {},
   "source": [
    "Предсказания:\n",
    "\n",
    "$$\n",
    "a = Xw\n",
    "$$\n",
    "\n",
    "Задача обучения:\n",
    "\n",
    "$$\n",
    "w = \\arg\\min_w MSE(Xw, y)\n",
    "$$\n",
    "\n",
    "Нам необхoдимо доказать что $$a = a_p$$\n",
    "следовательно должно получится $$Xw = PXw_p$$\n",
    "\n",
    "Формула обучения:\n",
    "\n",
    "$$\n",
    "a = Xw = XEw = XPP^{-1}w = (XP)P^{-1}w = (XP)w'\n",
    "$$\n",
    "\\\n",
    "$$\n",
    "w = (X^T X)^{-1} X^T y\n",
    "$$\n",
    "\\\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "706859f8",
   "metadata": {},
   "source": [
    "$w' = (XP^T XP)^{-1} XP^T y$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4b970b9",
   "metadata": {},
   "source": [
    " $(XP)^T$ = $(P^T X^T X P)^{-1}$\n",
    " \\\n",
    " $(ABC)^{-1} = (BC)^{-1}A^{-1} = C^{-1}B^{-1}A^{-1}$\n",
    " \\\n",
    " $P^{-1}(X^TX)^{-1}(P^T)^{-1}P^TX^Ty = (X^TX)^{-1}P^TX^Ty $ \n",
    " \\\n",
    " $w' = P^{-1}w$\n",
    " \\\n",
    " $a' = X'P^{-1}w$\n",
    " \\\n",
    " $a' = XPP^{-1}$\n",
    " \\\n",
    " $a' = Xw$\n",
    " \\\n",
    " $a' = a$\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0edddeb",
   "metadata": {},
   "source": [
    "**Вопрос:** Признаки умножают на обратимую матрицу. Изменится ли качество линейной регрессии?\n",
    "\n",
    "**Ответ:** Не изменится\n",
    "\n",
    "**Обоснование:** Приведено выше"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f94d667f",
   "metadata": {},
   "source": [
    "# 3. Алгоритм преобразования"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c1a2cd7",
   "metadata": {},
   "source": [
    "**Алгоритм**\n",
    "\n",
    "В качестве алгоритма преобразования примем домножение обучающих признаков X на случайную обратимую матрицу P размером 4х4. Создадим модель линейной регрессии до преобразования и посчитаем метрику R2. Далее умножим исходные признаки на обратимую матрицу и на основе полученных значений вновь посчитаем метрику R2. Метрики R2 по итогу должны быть равны.\n",
    "\n",
    "**Обоснование**\n",
    "\n",
    "Как было показано в предыдущем пункте, домножение признаков на какую-либо обратимую матрицу не приводит к изменению предсказаний, поэтому результаты R2 должны оказаться равны"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a50095b2",
   "metadata": {},
   "source": [
    "#### Разделение данных на целевую и обучающую выборки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "295a4d1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "features=data.drop(['Страховые выплаты'],axis=1)\n",
    "target=data['Страховые выплаты']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66ed371a",
   "metadata": {},
   "source": [
    "#### Создаем выборки обуч и тест"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2b9302a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "features_train, features_test, target_train, target_test = train_test_split(\n",
    "    features, target, test_size=0.25, random_state=12345)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6ac143",
   "metadata": {},
   "source": [
    "#### Модель с исходными признаками без преобразования"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a332875d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 = 0.43522757127026546\n"
     ]
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(features_train, target_train)\n",
    "R2_LR_origin_data = r2_score(target_test, model.predict(features_test))\n",
    "print(\"R2 =\", R2_LR_origin_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7a94f77",
   "metadata": {},
   "source": [
    "#### Модель с отмасштабированными признаками без преобразования"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5374e8af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 = 0.4352275712702668\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "scaller = StandardScaler()\n",
    "pipeline = Pipeline([(\"standard_scaller\", scaller),(\"linear_regression\", regressor)])\n",
    "pipeline.fit(features_train, target_train)\n",
    "R2_LR_origin_data_scaled = r2_score(target_test, pipeline.predict(features_test))\n",
    "print(\"R2 =\", R2_LR_origin_data_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9791062",
   "metadata": {},
   "source": [
    "### Вывод\n",
    "Качество модели практически не меняется"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfc0665a",
   "metadata": {},
   "source": [
    "## Иследование качества модели c преобразованием"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "14ac7e99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.30487805, -0.34146341, -0.37804878,  0.62195122],\n",
       "       [ 0.17073171,  0.04878049, -0.06504065, -0.06504065],\n",
       "       [-0.1402439 , -0.18292683,  0.16056911,  0.16056911],\n",
       "       [-0.29268293,  0.48780488,  0.3495935 , -0.6504065 ]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Создадим рандомную матрицу-ключ\n",
    "n = features.shape[1]\n",
    "crypto_matrix = np.random.randint(1,10, (n,n))\n",
    "#Признаки защищенные\n",
    "crypto_features = features\n",
    "crypted_features = crypto_features @ crypto_matrix\n",
    "np.linalg.inv(crypto_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "17ed8269",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Пол</th>\n",
       "      <th>Возраст</th>\n",
       "      <th>Зарплата</th>\n",
       "      <th>Члены семьи</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>41.0</td>\n",
       "      <td>49600.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>38000.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>41700.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>26100.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Пол  Возраст  Зарплата  Члены семьи\n",
       "0    1     41.0   49600.0            1\n",
       "1    0     46.0   38000.0            1\n",
       "2    0     29.0   21000.0            0\n",
       "3    0     21.0   41700.0            2\n",
       "4    1     28.0   26100.0            0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>198779.0</td>\n",
       "      <td>396851.0</td>\n",
       "      <td>396890.0</td>\n",
       "      <td>248378.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>152422.0</td>\n",
       "      <td>304047.0</td>\n",
       "      <td>304096.0</td>\n",
       "      <td>190421.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84261.0</td>\n",
       "      <td>168029.0</td>\n",
       "      <td>168058.0</td>\n",
       "      <td>105261.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>167005.0</td>\n",
       "      <td>333623.0</td>\n",
       "      <td>333650.0</td>\n",
       "      <td>208703.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>104654.0</td>\n",
       "      <td>208837.0</td>\n",
       "      <td>208860.0</td>\n",
       "      <td>130754.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  198779.0  396851.0  396890.0  248378.0\n",
       "1  152422.0  304047.0  304096.0  190421.0\n",
       "2   84261.0  168029.0  168058.0  105261.0\n",
       "3  167005.0  333623.0  333650.0  208703.0\n",
       "4  104654.0  208837.0  208860.0  130754.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([[2, 9, 4, 2],\n",
       "       [9, 1, 2, 9],\n",
       "       [4, 8, 8, 5],\n",
       "       [8, 1, 4, 7]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display(features.head())\n",
    "display(crypted_features.head())\n",
    "crypto_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c5fc3ac",
   "metadata": {},
   "source": [
    "### Вывод\n",
    "Видно, что оригинальные данные заменились на совершенно другие цифры."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f113fea",
   "metadata": {},
   "source": [
    "## Проверим качество модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "92717827",
   "metadata": {},
   "outputs": [],
   "source": [
    "features_train, features_test, target_train, target_test = train_test_split(\n",
    "    crypted_features, target, test_size=0.25, random_state=12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9bc05fb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 = 0.4352275712703343\n"
     ]
    }
   ],
   "source": [
    "# Модель с исходными признаками без преобразования\n",
    "model = LinearRegression()\n",
    "model.fit(features_train, target_train)\n",
    "R2_LR_cipher_data = r2_score(target_test, model.predict(features_test))\n",
    "print(\"R2 =\", R2_LR_cipher_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1d36b9a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 = 0.43522757127035416\n"
     ]
    }
   ],
   "source": [
    "# Модель с отмасштабированными признаками без преобразования\n",
    "regressor = LinearRegression()\n",
    "scaller = StandardScaler()\n",
    "pipeline = Pipeline([(\"standard_scaller\", scaller),(\"linear_regression\", regressor)])\n",
    "pipeline.fit(features_train, target_train)\n",
    "R2_LR_cipher_data_scaled = r2_score(target_test, pipeline.predict(features_test))\n",
    "print(\"R2 =\", R2_LR_cipher_data_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1bbb26",
   "metadata": {},
   "source": [
    "# Вывод\n",
    "Качество линейной регресии не изменилось от использования исxодной матрицы и исходной матрицы, умноженную на обратимую. Это мы смогли доказать по формуле, а также практическим путем (была исследована метрика R2)."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 151,
    "start_time": "2023-05-08T16:49:29.519Z"
   },
   {
    "duration": 1655,
    "start_time": "2023-05-10T08:36:35.561Z"
   },
   {
    "duration": 123,
    "start_time": "2023-05-10T08:36:37.219Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-10T08:36:37.344Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-10T08:36:37.362Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-10T08:36:37.377Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-10T08:36:37.384Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-10T08:36:37.394Z"
   },
   {
    "duration": 198,
    "start_time": "2023-05-10T08:36:37.415Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-10T08:36:37.615Z"
   },
   {
    "duration": 187,
    "start_time": "2023-05-10T08:36:37.628Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-10T08:36:37.816Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-10T08:36:37.823Z"
   },
   {
    "duration": 32,
    "start_time": "2023-05-10T08:36:37.847Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
